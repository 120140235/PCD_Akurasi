import cv2
import numpy as np


def canny(img):
    """
    Melakukan edge detection menggunakan metode Canny

    Args:
      img: Citra input

    Returns:
       Citra output hasil edge detection
    """

    # Menentukan nilai threshold atas dan bawah
    threshold_atas = 100
    threshold_bawah = 50

    # Melakukan edge detection
    edges = cv2.Canny(img, threshold_atas, threshold_bawah)

    return edges


def sobel(img):
    """
    Melakukan edge detection menggunakan metode Sobel

    Args:
      img: Citra input

    Returns:
       Citra output hasil edge detection
    """

    # Menentukan arah gradien
    arah = cv2.cv.CV_8UC1

    # Melakukan edge detection
    edges = cv2.cv.Sobel(img, arah, 1, 0)

    return edges


def prewitt(img):
    """
    Melakukan edge detection menggunakan metode Prewitt

    Args:
      img: Citra input

    Returns:
       Citra output hasil edge detection
    """

    # Menentukan arah gradien
    arah = cv2.cv.CV_8UC1

    # Melakukan edge detection
    edges = cv2.cv.Prewitt(img, arah, 1, 0)

    return edges


def roberts(img):
    """
    Melakukan edge detection menggunakan metode Roberts

    Args:
      img: Citra input

    Returns:
       Citra output hasil edge detection
    """

    # Menentukan arah gradien
    arah = cv2.cv.CV_8UC1

    # Melakukan edge detection
    edges = cv2.cv.Roberts(img, arah)

    return edges


def get_accuracy(img, edges):
    """
    Menghitung akurasi edge detection

    Args:
      img: Citra input
      edges: Citra output hasil edge detection

    Returns:
       Akurasi edge detection
    """

    # Menghitung jumlah piksel tepi pada citra asli
    jumlah_piksel_tepi_asli = np.sum(img > 0)

    # Menghitung jumlah piksel tepi pada citra hasil edge detection
    jumlah_piksel_tepi_deteksi = np.sum(edges > 0)

    # Menghitung akurasi edge detection
    akurasi = jumlah_piksel_tepi_deteksi / jumlah_piksel_tepi_asli

    return akurasi


def main():
    # Membaca 6 gambar
    img1 = cv2.imread("CM_matang1.jpg")
    img2 = cv2.imread("CM_matang2.jpg")
    img3 = cv2.imread("CM_matang3.jpg")
    img4 = cv2.imread("CM_matang4.jpg")
    img5 = cv2.imread("CM_matang5.jpg")
    img6 = cv2.imread("CM_matang6.jpg")

    # Menentukan nilai threshold atas dan bawah
    threshold_atas = 100
    threshold_bawah = 50

    # Melakukan edge detection
    edges_canny1 = canny(img1)
    edges_canny2 = canny(img2)
    edges_canny3 = canny(img3)
    edges_canny4 = canny(img4)
    edges_canny5 = canny(img5)
    edges_canny6 = canny(img6)

    edges_sobel1 = sobel(img1)
    edges_sobel2 = sobel(img2)
    edges_sobel3 = sobel(img3)
    edges_sobel4 = sobel(img4)
    edges_sobel5 = sobel(img5)
    edges_sobel6 = sobel(img6)

    edges_prewitt1 = prewitt(img1)
    edges_prewitt2 = prewitt(img2)
    edges_prewitt3 = prewitt(img3)
    edges_prewitt4 = prewitt(img4)
    edges_prewitt5 = prewitt(img5)
    edges_prewitt6 = prewitt(img6)

    # Menampilkan hasil edge detection
    cv2.imshow("Canny 1", edges_canny1)
    cv2.imshow("Sobel 1", edges_sobel1)
    cv2.imshow("Prewitt 1", edges_prewitt1)

    # Menampilkan akurasi edge detection
    akurasi_canny1 = get_accuracy(img1, edges_canny1)
    akurasi_sobel1 = get_accuracy(img1, edges_sobel1)
    akurasi_prewitt1 = get_accuracy(img1, edges_prewitt1)
    print("Akurasi Canny 1:", akurasi_canny1)
    print("Akurasi Sobel 1:", akurasi_sobel1)
    print("Akurasi Prewitt 1:", akurasi_prewitt1)

    cv2.waitKey(0)


if __name__ == "__main__":
    main()
