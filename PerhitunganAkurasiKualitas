import cv2
import numpy as np


def canny(image, sigma):
    # Grayscale the image
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur
    blur = cv2.GaussianBlur(gray, (5, 5), sigma)

    # Compute the gradient magnitude and direction
    grad_x, grad_y = cv2.Sobel(blur, cv2.CV_64F, 1, 0, ksize=3)
    grad_magnitude = np.sqrt(grad_x**2 + grad_y**2)
    grad_direction = np.arctan2(grad_y, grad_x)

    # Apply non-maximum suppression
    non_max_suppression = cv2.threshold(
        grad_magnitude, 0.0, 255.0, cv2.THRESH_BINARY, cv2.THRESH_OTSU)

    # Apply double thresholding
    threshold_low = 0.5 * non_max_suppression.max()
    threshold_high = 0.8 * non_max_suppression.max()
    edges = cv2.Canny(non_max_suppression, threshold_low, threshold_high)

    return edges


def prewitt(image):
    # Grayscale the image
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Sobel filter
    edges = cv2.filter2D(
        gray, -1, np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]]))

    return edges


def sobel(image):
    # Grayscale the image
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Sobel filter
    edges = cv2.filter2D(
        gray, -1, np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]))

    return edges


def roberts(image):
    # Grayscale the image
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Roberts filter
    edges = cv2.filter2D(gray, -1, np.array([[1, 0], [0, -1]])) + \
        cv2.filter2D(gray, -1, np.array([[0, 1], [-1, 0]]))

    return edges


def calculate_accuracy(image, edges, ground_truth):
    # Find the contours in the edges image
    contours, hierarchy = cv2.findContours(
        edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Initialize the true and false positive counts
    true_positives = 0
    false_positives = 0

    # Iterate over the contours
    for contour in contours:
        # Get the bounding box of the contour
        x, y, w, h = cv2.boundingRect(contour)

        # Check if the bounding box intersects with the ground truth
        if x >= ground_truth[0] and x <= ground_truth[2] and y >= ground_truth[1] and y <= ground_truth[3]:
            # The contour is a true positive
            true_positives += 1
        else:
            # The contour is a false positive
            false_positives += 1

    # Calculate the accuracy
    accuracy = true_positives / (true_positives + false_positives)

    return accuracy


def main():
    # Load the image
    image = cv2.imread("CM_matang1.jpg")

    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Canny edge detection
    edges_canny = canny
